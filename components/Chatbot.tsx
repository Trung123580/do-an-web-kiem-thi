"use client";
import React, { useState } from "react";

const ChatBot = () => {
  const [openChat, setOpenChat] = useState(false);
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([
    {
      role: "assistant",
      content: "Xin chào! Tôi có thể giúp gì cho bạn?",
      time: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
      }),
    },
  ]);
  const [loading, setLoading] = useState(false);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      submitChat();
    }
  };
  const submitChat = async () => {
    if (!input.trim()) return;
    setLoading(true);
    const userMessage = {
      role: "user",
      content: input,
      time: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
      }),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ input }),
      });

      const data = await response.json();
      const assistantReply = {
        ...data.choices?.[0]?.message,
        time: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
          hour12: false,
        }),
      };
      console.log(assistantReply);
      if (assistantReply.content) {
        setMessages((prev) => [...prev, assistantReply]);
      } else {
        setMessages((prev) => [
          ...prev,
          {
            role: "assistant",
            content: "Đã xảy ra lỗi. Vui lòng thử lại.",
            time: new Date().toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
              hour12: false,
            }),
          },
        ]);
      }
    } catch (error) {
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: "Đã xảy ra lỗi. Vui lòng thử lại.",
          time: new Date().toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit",
            hour12: false,
          }),
        },
      ]);
    }
    setLoading(false);
  };
  return (
    <div className="fixed  bottom-14 right-10 w-12 h-12 bg-blue-600 rounded-full z-50 flex items-center justify-center shadow-lg">
      <svg onClick={() => setOpenChat(!openChat)} className="cursor-pointer" xmlns="http://www.w3.org/2000/svg" width="34" height="30" viewBox="0 0 34 30" fill="none">
        <path
          d="M16.9999 30C16.5277 30 16.1319 29.8403 15.8124 29.5208C15.493 29.2014 15.3333 28.8056 15.3333 28.3333C15.3333 27.8611 15.493 27.4653 15.8124 27.1458C16.1319 26.8264 16.5277 26.6667 16.9999 26.6667H28.6666V14.8333C28.6666 11.5833 27.5346 8.82639 25.2708 6.5625C23.0069 4.29861 20.2499 3.16667 16.9999 3.16667C13.7499 3.16667 10.993 4.29861 8.72908 6.5625C6.4652 8.82639 5.33325 11.5833 5.33325 14.8333V23.3333C5.33325 23.8056 5.17353 24.2014 4.85408 24.5208C4.53464 24.8403 4.13881 25 3.66658 25C2.74992 25 1.9652 24.6736 1.31242 24.0208C0.659641 23.3681 0.333252 22.5833 0.333252 21.6667V18.3333C0.333252 17.75 0.479085 17.2014 0.770752 16.6875C1.06242 16.1736 1.47214 15.7639 1.99992 15.4583L2.12492 13.25C2.34714 11.3611 2.89575 9.61111 3.77075 8C4.64575 6.38889 5.74297 4.98611 7.06242 3.79167C8.38186 2.59722 9.89575 1.66667 11.6041 1C13.3124 0.333333 15.111 0 16.9999 0C18.8888 0 20.6805 0.333333 22.3749 1C24.0694 1.66667 25.5833 2.59028 26.9166 3.77083C28.2499 4.95139 29.3471 6.34722 30.2083 7.95833C31.0694 9.56944 31.6249 11.3194 31.8749 13.2083L31.9999 15.375C32.5277 15.625 32.9374 16 33.2291 16.5C33.5207 17 33.6666 17.5278 33.6666 18.0833V21.9167C33.6666 22.4722 33.5207 23 33.2291 23.5C32.9374 24 32.5277 24.375 31.9999 24.625V26.6667C31.9999 27.5833 31.6735 28.3681 31.0208 29.0208C30.368 29.6736 29.5833 30 28.6666 30H16.9999ZM11.9999 18.3333C11.5277 18.3333 11.1319 18.1736 10.8124 17.8542C10.493 17.5347 10.3333 17.1389 10.3333 16.6667C10.3333 16.1944 10.493 15.7986 10.8124 15.4792C11.1319 15.1597 11.5277 15 11.9999 15C12.4721 15 12.868 15.1597 13.1874 15.4792C13.5069 15.7986 13.6666 16.1944 13.6666 16.6667C13.6666 17.1389 13.5069 17.5347 13.1874 17.8542C12.868 18.1736 12.4721 18.3333 11.9999 18.3333ZM21.9999 18.3333C21.5277 18.3333 21.1319 18.1736 20.8124 17.8542C20.493 17.5347 20.3333 17.1389 20.3333 16.6667C20.3333 16.1944 20.493 15.7986 20.8124 15.4792C21.1319 15.1597 21.5277 15 21.9999 15C22.4721 15 22.868 15.1597 23.1874 15.4792C23.5069 15.7986 23.6666 16.1944 23.6666 16.6667C23.6666 17.1389 23.5069 17.5347 23.1874 17.8542C22.868 18.1736 22.4721 18.3333 21.9999 18.3333ZM7.04158 15.75C6.84714 12.8056 7.73603 10.2778 9.70825 8.16667C11.6805 6.05556 14.1388 5 17.0833 5C19.5555 5 21.7291 5.78472 23.6041 7.35417C25.4791 8.92361 26.611 10.9306 26.9999 13.375C24.4721 13.3472 22.1458 12.6667 20.0208 11.3333C17.8958 10 16.2638 8.19444 15.1249 5.91667C14.6805 8.13889 13.743 10.1181 12.3124 11.8542C10.8819 13.5903 9.12492 14.8889 7.04158 15.75Z"
          fill="white"
        />
      </svg>
      {openChat && (
        <div className="bg-white w-[413px] h-[560px] bottom-14  right-0 absolute rounded-2xl z-50 pt-2 shadow-2xl">
          <div className="rounded-2xl flex justify-end px-4">
            <img onClick={() => setOpenChat(false)} className="rounded-2xl cursor-pointer" src="/image/arrowdown.png" alt="" />
          </div>
          <div className="flex gap-2.5 pb-3.5 border-b border-[#CFD1D4] px-4">
            <div>
              <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none">
                <rect width="48" height="48" rx="24" fill="#3A63ED" />
                <path
                  d="M24.0001 36C23.6223 36 23.3056 35.8722 23.0501 35.6167C22.7945 35.3611 22.6667 35.0444 22.6667 34.6667C22.6667 34.2889 22.7945 33.9722 23.0501 33.7167C23.3056 33.4611 23.6223 33.3333 24.0001 33.3333H33.3334V23.8667C33.3334 21.2667 32.4279 19.0611 30.6167 17.25C28.8056 15.4389 26.6001 14.5333 24.0001 14.5333C21.4001 14.5333 19.1945 15.4389 17.3834 17.25C15.5723 19.0611 14.6667 21.2667 14.6667 23.8667V30.6667C14.6667 31.0444 14.539 31.3611 14.2834 31.6167C14.0279 31.8722 13.7112 32 13.3334 32C12.6001 32 11.9723 31.7389 11.4501 31.2167C10.9279 30.6944 10.6667 30.0667 10.6667 29.3333V26.6667C10.6667 26.2 10.7834 25.7611 11.0167 25.35C11.2501 24.9389 11.5779 24.6111 12.0001 24.3667L12.1001 22.6C12.2779 21.0889 12.7167 19.6889 13.4167 18.4C14.1167 17.1111 14.9945 15.9889 16.0501 15.0333C17.1056 14.0778 18.3167 13.3333 19.6834 12.8C21.0501 12.2667 22.489 12 24.0001 12C25.5112 12 26.9445 12.2667 28.3001 12.8C29.6556 13.3333 30.8667 14.0722 31.9334 15.0167C33.0001 15.9611 33.8779 17.0778 34.5667 18.3667C35.2556 19.6556 35.7001 21.0556 35.9001 22.5667L36.0001 24.3C36.4223 24.5 36.7501 24.8 36.9834 25.2C37.2167 25.6 37.3334 26.0222 37.3334 26.4667V29.5333C37.3334 29.9778 37.2167 30.4 36.9834 30.8C36.7501 31.2 36.4223 31.5 36.0001 31.7V33.3333C36.0001 34.0667 35.739 34.6944 35.2167 35.2167C34.6945 35.7389 34.0667 36 33.3334 36H24.0001ZM20.0001 26.6667C19.6223 26.6667 19.3056 26.5389 19.0501 26.2833C18.7945 26.0278 18.6667 25.7111 18.6667 25.3333C18.6667 24.9556 18.7945 24.6389 19.0501 24.3833C19.3056 24.1278 19.6223 24 20.0001 24C20.3779 24 20.6945 24.1278 20.9501 24.3833C21.2056 24.6389 21.3334 24.9556 21.3334 25.3333C21.3334 25.7111 21.2056 26.0278 20.9501 26.2833C20.6945 26.5389 20.3779 26.6667 20.0001 26.6667ZM28.0001 26.6667C27.6223 26.6667 27.3056 26.5389 27.0501 26.2833C26.7945 26.0278 26.6667 25.7111 26.6667 25.3333C26.6667 24.9556 26.7945 24.6389 27.0501 24.3833C27.3056 24.1278 27.6223 24 28.0001 24C28.3779 24 28.6945 24.1278 28.9501 24.3833C29.2056 24.6389 29.3334 24.9556 29.3334 25.3333C29.3334 25.7111 29.2056 26.0278 28.9501 26.2833C28.6945 26.5389 28.3779 26.6667 28.0001 26.6667ZM16.0334 24.6C15.8779 22.2444 16.589 20.2222 18.1667 18.5333C19.7445 16.8444 21.7112 16 24.0667 16C26.0445 16 27.7834 16.6278 29.2834 17.8833C30.7834 19.1389 31.689 20.7444 32.0001 22.7C29.9779 22.6778 28.1167 22.1333 26.4167 21.0667C24.7167 20 23.4112 18.5556 22.5001 16.7333C22.1445 18.5111 21.3945 20.0944 20.2501 21.4833C19.1056 22.8722 17.7001 23.9111 16.0334 24.6Z"
                  fill="white"
                />
              </svg>
            </div>
            <div>
              <h1 className="text-lg font-normal text-black">Trợ lý ảo</h1>
              <p className="text-[10px] font-normal text-[#A0A3A9]">Công cụ Ai hỗ trợ tìm kiếm thông tin và trả lời tự động.</p>
            </div>
          </div>
          <div className="overflow-y-auto min-h-[398px] h-[398px]">
            {messages.map((item, index) => (
              <div key={index} className={`flex ${item.role === "user" ? "justify-end" : "justify-start"} gap-2.5 pb-3.5 px-4 pt-4`}>
                {item.role === "assistant" ? (
                  <>
                    <div>
                      <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none">
                        <rect width="48" height="48" rx="24" fill="#3A63ED" />
                        <path
                          d="M24.0001 36C23.6223 36 23.3056 35.8722 23.0501 35.6167C22.7945 35.3611 22.6667 35.0444 22.6667 34.6667C22.6667 34.2889 22.7945 33.9722 23.0501 33.7167C23.3056 33.4611 23.6223 33.3333 24.0001 33.3333H33.3334V23.8667C33.3334 21.2667 32.4279 19.0611 30.6167 17.25C28.8056 15.4389 26.6001 14.5333 24.0001 14.5333C21.4001 14.5333 19.1945 15.4389 17.3834 17.25C15.5723 19.0611 14.6667 21.2667 14.6667 23.8667V30.6667C14.6667 31.0444 14.539 31.3611 14.2834 31.6167C14.0279 31.8722 13.7112 32 13.3334 32C12.6001 32 11.9723 31.7389 11.4501 31.2167C10.9279 30.6944 10.6667 30.0667 10.6667 29.3333V26.6667C10.6667 26.2 10.7834 25.7611 11.0167 25.35C11.2501 24.9389 11.5779 24.6111 12.0001 24.3667L12.1001 22.6C12.2779 21.0889 12.7167 19.6889 13.4167 18.4C14.1167 17.1111 14.9945 15.9889 16.0501 15.0333C17.1056 14.0778 18.3167 13.3333 19.6834 12.8C21.0501 12.2667 22.489 12 24.0001 12C25.5112 12 26.9445 12.2667 28.3001 12.8C29.6556 13.3333 30.8667 14.0722 31.9334 15.0167C33.0001 15.9611 33.8779 17.0778 34.5667 18.3667C35.2556 19.6556 35.7001 21.0556 35.9001 22.5667L36.0001 24.3C36.4223 24.5 36.7501 24.8 36.9834 25.2C37.2167 25.6 37.3334 26.0222 37.3334 26.4667V29.5333C37.3334 29.9778 37.2167 30.4 36.9834 30.8C36.7501 31.2 36.4223 31.5 36.0001 31.7V33.3333C36.0001 34.0667 35.739 34.6944 35.2167 35.2167C34.6945 35.7389 34.0667 36 33.3334 36H24.0001ZM20.0001 26.6667C19.6223 26.6667 19.3056 26.5389 19.0501 26.2833C18.7945 26.0278 18.6667 25.7111 18.6667 25.3333C18.6667 24.9556 18.7945 24.6389 19.0501 24.3833C19.3056 24.1278 19.6223 24 20.0001 24C20.3779 24 20.6945 24.1278 20.9501 24.3833C21.2056 24.6389 21.3334 24.9556 21.3334 25.3333C21.3334 25.7111 21.2056 26.0278 20.9501 26.2833C20.6945 26.5389 20.3779 26.6667 20.0001 26.6667ZM28.0001 26.6667C27.6223 26.6667 27.3056 26.5389 27.0501 26.2833C26.7945 26.0278 26.6667 25.7111 26.6667 25.3333C26.6667 24.9556 26.7945 24.6389 27.0501 24.3833C27.3056 24.1278 27.6223 24 28.0001 24C28.3779 24 28.6945 24.1278 28.9501 24.3833C29.2056 24.6389 29.3334 24.9556 29.3334 25.3333C29.3334 25.7111 29.2056 26.0278 28.9501 26.2833C28.6945 26.5389 28.3779 26.6667 28.0001 26.6667ZM16.0334 24.6C15.8779 22.2444 16.589 20.2222 18.1667 18.5333C19.7445 16.8444 21.7112 16 24.0667 16C26.0445 16 27.7834 16.6278 29.2834 17.8833C30.7834 19.1389 31.689 20.7444 32.0001 22.7C29.9779 22.6778 28.1167 22.1333 26.4167 21.0667C24.7167 20 23.4112 18.5556 22.5001 16.7333C22.1445 18.5111 21.3945 20.0944 20.2501 21.4833C19.1056 22.8722 17.7001 23.9111 16.0334 24.6Z"
                          fill="white"
                        />
                      </svg>
                    </div>
                    <div>
                      <p className="text-[10px] font-normal mb-1 text-[#A0A3A9]">{item.time}</p>
                      <div className="text-base font-normal px-4 py-2 rounded-lg text-black bg-[#F2F2F3]">{item.content}</div>
                    </div>
                  </>
                ) : (
                  <>
                    <div>
                      <p className="flex justify-end text-[10px] font-normal mb-1 text-[#A0A3A9]">{item.time}</p>
                      <div className="text-base font-normal px-4 py-2 rounded-lg text-black bg-[#F2F2F3]">{item.content}</div>
                    </div>
                    <div className="w-[48px] h-[48px] min-w-[48px]">
                      <img className="rounded-2xl w-[48px] h-[48px]" src="/image/chatboxauthor.png" alt="" />
                    </div>
                  </>
                )}
              </div>
            ))}
            {loading && (
              <div className="mt-2 text-black-500 animate-pulse flex justify-center">
                {" "}
                <div className="w-4 h-4 border-2 border-black-500 border-t-transparent rounded-full animate-spin"></div>
              </div>
            )}
          </div>
          <div className="absolute bottom-0 border-t border-[#CFD1D4] w-full rounded-b-2xl px-4 py-2">
            <div className="flex flex-grow">
              <input onKeyDown={handleKeyDown} value={input} onChange={(e) => setInput(e.target.value)} className="w-[90%] outline-0 border-0 h-[50px]" type="text" />
              <div className="flex justify-center items-center cursor-pointer">
                <img
                  onClick={!loading ? submitChat : undefined}
                  className={`flex-1 object-contain w-[32px] h-[32px] cursor-pointer 
                  ${loading ? "pointer-events-none opacity-50" : ""}`}
                  src="/image/send.png"
                  alt=""
                />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatBot;
